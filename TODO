-*- Text -*- 

     MAJOR TODO LIST
=======================================================================

 * Conversations - statefull clients server communicaion.

 PARTIAL * SRBP (TCP/IP) clients and gateways between MW instances.
	 * missing large data
	 * and of course all event handling
	 (done) * interinstance gw missing (need config file)
	 (done) * broker daemons missing.

(OK) * Perl module
     * A SRBP module partial ready
     * native module ready

(OK) * Python module

(OBSOLETE) * TCL bindings

 * PHP bindings 

 * A GNOME mwadm

 * Java TCP/IP Client API

 * Java RMI bindings

 * Transaction support


     MINOR TODO LIST
=======================================================================

 * Staticstics

OK * trace facility

 * SRB trace need better peer info. (_mw_srb_trace)

 * Data buffers are not arbitrary length

 * fast path missing

 (partly) * server mangement, Tuxedo style

 (partly) * config file (XML)

 * authentication in gateway. Requires config 

 * allow multiple replies to a service request. Solves the html
   problem, and simple to implement.

 * in doc, add refernce to pthreads programming ch3. THread pools p98

 * protocol version negotiation

 (OK) * if mwcall() or mwacall(,,,!MWMULTIPLE), MULTIPLE flag is set 
	to  server so that concatination of replies happen on	 
	client. Also, return code on mwreply() can now be either 
	MWFAIL, MWSUCCESS, or MWMORE. MWMORE in flag is depreciated.

 * After introducing the [SVC|SRV|GW]ID2MWID() and
   MWID2[SVC|SRV|GW]ID() macros, shich really enhanced a lot on
   readability, and propper casting, there is now confusion on where
   the masks (see MidWay.h) are used and where they're not.  we should
   really introduce a MWID datatype where the masks are set, and NOT
   use the mask in the SERVICEID, SERVERID, and GATEWAYID. It may be a
   good idea to make the MWID a long long to enforce this casting
   propperly.

(OK?) * the _mwacall() in lib  choose randomly among services, regardless if
  they're local or  remote. Is this right, or should  we have a policy
  on this?

* urlmap speed
  It appear that the urlmap encode/decode is way too heavy; propose two fixes:
  1) extend SRB protocol with DATAINLINE=<octets> and send <octets> after the delimiting \r\n
  and delimit the end of the data with \r\n e.g:
  SRBDATA!HANDLE=12345678&DATAINLINE=8\r\nDATADATA\r\n
  In this form the data shall not be encoded. 
  2) it appear that the malloc's of all the buffers in the map is hysterically expensive
  we need to alloc largers chunks and keep track of what is used. 
