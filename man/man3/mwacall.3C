.\" Hey Emacs! This file is -*- nroff -*- source.
.\"
.\" Copyright (c) 1999 Terje Eggestad <terje.eggestad@iname.com>
.\" May be distributed under the GNU General Public License.
.\" $Id$
.\" $Name$
.\"
.TH MWCALL 3C  DATE "MidWay 1.0" "MidWay Programmer's Manual"
.SH NAME
mwcall mwacall, mwfetch \- MidWay service calls
.SH SYNOPSIS
.B #include <MidWay.h>
.sp
.BI "int mwcall(char * " servicename ", char * " data ", int " len 
.BI ", char ** " rdata ", int * " rlen ", int * " appreturncode ", int " flags ");"
.sp
.BI "int mwacall(char * " servicename ", char * " data ", int " len ", int " flags ");"
.br
.BI "int mwfetch(int " handle ", char ** " rdata ", int * " rlen ", int * " appreturncode  ", int " flags ");"

.SH DESCRIPTION
These calls are used to send a service request to a given service see
mwservice(3C)/mwprovide(3C).  mwcall() is really a mwacall() mwfetch()
pair, and is provided as a convince.
.sp
Servicename is a null terminated string of max 32 characters long. In
order for this call to succeed some server in the MidWay must have
provided a service with name
.IR servicename .
.I Data
is a pointer to the request buffer passed to the service routine. 
The number of bytes of data is given by
.IR len . 
If data is a NULL terminated string len may be 0. Similarly 
.I rdata
and 
.I rlen
is used for receiving the return buffer from the service routine. The
return buffer is alway allocated with
.B mwalloc()
and must be freed by 
.BR mwfree() .
It is not required that the request buffer is allocated by 
.BR mwalloc() . 
If it is not mw(a)call will allocate one automatically of the needed
size, and free it on the return.
.sp
Typically when you pass C structs or C++ objects around you will need
to copy the data in the return buffer into the struct or have a
pointer to it. Note that if you are using fastpath you may cause a
possible shared memory buffer leak. (see
.BR mwalloc() ). 

.I Appreturncode 
is provided for the service routine to pass back an application level
return/exit code.  The use of this is not mandatory. It may be NULL.
.I Handle
is used if you have made several mwacall() and want it retrieve a
specific reply.  If handle is 0 the first reply is returned.

The 
.I flags
parameter controls some aspects of the calls. There are currently
these flags.
.TP
.B MWNOREPLY
Used in mwcall() and mwacall() only. It tells the server that no reply
is needed. Note that you don't get any confirmation that the request
ever gets processed.
.TP
.B MWNOBLOCK
Used in all calls, specifies that the calls should fail if they
encounter a condition where they would block. There are one condition,
mwcall() will of course block while reading our own message queue
while waiting for the reply from a server. If you want to avoid that
condition you must used mwacall() and mwfetch() explicitly.
.TP
.B MWMULTIPLE
This flag is only legal for mwfetch. If the server make multiple
replies, mwfetch should return them in sequence with return code
MWMORE exept the last repliy which return
.BR MWSUCCESS " or " MWFAIL .
If this flag is not set, and the server make multiple replies, the
client libarary will concatenate all the replies into one.

.SH "RETURN VALUES"
On success mwcall() return 0, and mwfetch returns 0 if there is no
more replies from the server or 1 if the server intends to send more
replies. mwacall() return the handle
that may be used with mwfetch to retrieve the reply.  On failure we
get a negative errno. 
If the server signalled a failure by setting returncode to MWFAIL, 
.BR mwcall "() and " mwfetch "() return"
-EFAULT.

.SH "ERRORS"
.TP
.B ENOENT
There are no service with servicename available.
.TP
.B EFAULT
The service routine signalled that it failed.
.TP 
.B ENOTCONN 
The calling process has not performed a successful mwattach() 
and is thus not attach to a running system.
.TP 
.B EINVAL
flags has a undefined flag set.
.TP 
.B EINTR
The subroutine was interrupted by a signal. (Actually one of the
underlying msgrcv() or select() system calls were.)
.TP
.B ETIME
The deadline set by mwbegin() was reached, while we were waiting for
one or more replys, or before mwcall was called..
.TP
.B ENOBUFS
We are out of MidWays shared memory buffers, see 
.BR mwd (1).
 
.TP
.B EAGAIN
The call would block and MWNOBLOCK flags was set. 

.SH WARNINGS


.SH EXAMPLES

.nf 
#include <MidWay.h>

char * data;
int handle, len;

data = mwalloc(100);
strcpy(data, "Hello Service");

handle = mwacall("TESTSERVICE", data, 100, MWMULTIPLE);

if (handle < 0) ; /* ERROR */

while( (rc = mwfetch(handle, &data, &len, 0L)) <= 0) {
	.
	.
	.
	mwfree(data);
	if (rc == 0) break;
};
.fi

.SH CAVEATS
If you have services that make multiple replies, NOT setting the
MWMULTIPLE flag to mwfetch is inefficient. All the replies must be
concatenated into one (which is why it's done in the client). Since
the client library must copy the replies into a malloc'ed buffer, and
realloc as needed (read the first reply may actually end up being
copied many times, if there are many replies). Keep in mind that this
is exactly what mwcall does, since it can only return one reply.


.SH BUGS 

.SH "SEE ALSO"

.BR mwattach (3C), mwprovide (3C)

.SH STANDARDS
NONE
